{"version":3,"sources":["components/Button.js","components/Navigation.js","components/DayWeatherInfo.js","api/time.js","components/WeekWeatherInfo.js","components/WeatherInfo.js","components/Time.js","components/WeatherCurrent.js","actions/types.js","api/cities.js","components/Preloader.js","containers/WeatherContainer.js","actions/actions.js","App.js","serviceWorker.js","reducers/rootReducer.js","api/config.js","api/index.js","sagas/index.js","store/store.js","index.js"],"names":["Button","props","react_default","a","createElement","className","onClick","Navigation","state","isActive","defineClass","_this","showNavigation","setState","_this$props","this","getCityWeather","currentCityId","cities","concat","components_Button","map","city","id","key","title","Component","DayWeatherInfo","_ref","day","dt_txt","substring","weather","main","Math","floor","temp","days","month","WeekWeatherInfo","index","Date","getDate","getDay","WeatherInfo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","viewChange","view","_this2","react","otherDaysData","components_DayWeatherInfo","item","moment","unix","dt","format","components_WeekWeatherInfo","Time","date","getHours","getMinutes","getSeconds","getMonth","getFullYear","WeatherCurrent","getTime","setInterval","currentCityName","weatherData","components_Time","CURRENT_WEATHER_SUCCESS","CURRENT_WEATHER_FAILURE","Preloader","WeatherContainer","_this$props2","isLoading","components_Navigation","components_Preloader","components_WeatherCurrent","components_WeatherInfo","connect","data","dispatch","cityId","cityName","type","payload","getCurrentWeather","App","containers_WeatherContainer","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","objectSpread","config","API_ROOT","API_KEY","API_UNITS","axios","defaults","params","api","request","create","baseURL","watchFetchData","regenerator_default","wrap","_context","prev","next","get","sent","put","list","t0","stop","_marked","_context2","takeLatest","_marked2","configureStore","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","logger","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","compose","apply","run","rootSaga","close","END","app","es","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAeeA,SAbA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,QAASL,EAAMK,SACrCJ,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,iBC+BGG,6MApCXC,MAAQ,CACJC,UAAU,KAIdC,YAAc,kBAAMC,EAAKH,MAAMC,SAAW,SAAW,eAErDG,eAAiB,WACbD,EAAKE,SAAS,CACVJ,UAAWE,EAAKH,MAAMC,oFAIrB,IAAAK,EAE2CC,KAAKd,MAA9Ce,EAFFF,EAEEE,eAAgBC,EAFlBH,EAEkBG,cAAeC,EAFjCJ,EAEiCI,OAEtC,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAc,OAAgBJ,KAAKL,gBAC/BR,EAAAC,EAAAC,cAACgB,EAAD,CAAQd,QAASS,KAAKH,iBACtBV,EAAAC,EAAAC,cAAA,UAEQc,EAAOG,IAAI,SAAAC,GAAI,OACXpB,EAAAC,EAAAC,cAAA,MACIC,UAAWiB,EAAKC,KAAON,EAAgB,SAAW,KAClDO,IAAKF,EAAKC,GACVjB,QAAS,kBAAMU,EAAeM,EAAKC,GAAID,EAAKG,SAC9CH,EAAKG,kBA7BVC,aCQVC,EATQ,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,IAAF,OACnB3B,EAAAC,EAAAC,cAAA,MAAIC,UAAW,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAASwB,EAAIC,OAAOC,UAAU,GAAG,KACjD7B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YAAawB,EAAIG,QAAQ,GAAGC,MAC5C/B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eAAgB6B,KAAKC,MAAMN,EAAII,KAAKG,MAAMlC,EAAAC,EAAAC,cAAA,iBAH9D,OAIIF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBAAhB,UCPFgC,EAAO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,SAAS,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UACzJC,EAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YCc9GC,EAZS,SAAAX,GAAA,IAAEC,EAAFD,EAAEC,IAAKW,EAAPZ,EAAOY,MAAP,OACpBtC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QACXiC,EAAMT,EAAIC,OAAOC,UAAU,EAAG,GAAK,GADxC,KAC6C,IAAIU,MAAOC,UAAYF,GAEpEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YAAagC,GAAK,IAAII,MAAOE,SAAWH,IACxDtC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eAAgB6B,KAAKC,MAAMN,EAAII,KAAKG,MAAMlC,EAAAC,EAAAC,cAAA,iBAL9D,OAOIF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBAAhB,2BC2DOuC,cA/DX,SAAAA,EAAY3C,GAAO,IAAAU,EAAA,OAAAkC,OAAAC,EAAA,EAAAD,CAAA9B,KAAA6B,IACfjC,EAAAkC,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAlC,KAAMd,KAMViD,WAAa,SAACC,GACVxC,EAAKE,SAAS,CACVsC,UATWxC,EAanBD,YAAc,SAAAyC,GAAI,OAAIxC,EAAKH,MAAM2C,OAASA,EAAO,SAAW,MAXxDxC,EAAKH,MAAQ,CACT2C,KAAM,OAHKxC,wEAgBV,IAAAyC,EAAArC,KAEL,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MACIE,QAAS,kBAAM8C,EAAKF,WAAW,QAC/B7C,UAAWU,KAAKL,YAAY,QAFhC,UAKAR,EAAAC,EAAAC,cAAA,MACIE,QAAS,kBAAM8C,EAAKF,WAAW,SAC/B7C,UAAWU,KAAKL,YAAY,SAFhC,YAORR,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAEa,QAApBU,KAAKP,MAAM2C,KAEPjD,EAAAC,EAAAC,cAACiD,EAAA,SAAD,KAEQtC,KAAKd,MAAMqD,cAAcjC,IAAI,SAACQ,EAAKW,GAAN,OAAgBtC,EAAAC,EAAAC,cAACmD,EAAD,CAAgB1B,IAAKA,EACLW,MAAOA,OAI5EtC,EAAAC,EAAAC,cAACiD,EAAA,SAAD,KAEQtC,KAAKd,MAAMqD,cAAcjC,IAAI,SAACmC,EAAMhB,GAChC,GAA6C,UAAzCiB,IAAOC,KAAKF,EAAKG,IAAIC,OAAO,UAAwBH,MAASG,OAAO,gBAAkBH,IAAOC,KAAKF,EAAKG,IAAIC,OAAO,cAClH,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,CAAiBhC,IAAK2B,EAAMhB,MAAOA,gBAnD5Dd,aCkBXoC,EApBF,SAAAlC,GAAA,IAAEmC,EAAFnC,EAAEmC,KAAF,OACT7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,YAAO2D,EAAKC,YADhB,IAEI9D,EAAAC,EAAAC,cAAA,YAAO2D,EAAKE,cAFhB,IAGI/D,EAAAC,EAAAC,cAAA,YAEQ2D,EAAKG,aAAe,GAAK,IAAMH,EAAKG,aAAeH,EAAKG,eAIpEhE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAAA,YAAOkC,EAAMyB,EAAKpB,UAAlB,MACAzC,EAAAC,EAAAC,cAAA,YAAOiC,EAAK0B,EAAKI,YAAjB,KACAjE,EAAAC,EAAAC,cAAA,YAAO2D,EAAKrB,UAAZ,MACAxC,EAAAC,EAAAC,cAAA,YAAO2D,EAAKK,kBCsBTC,6MAlCX7D,MAAQ,CACJuD,KAAM,IAAItB,QAId6B,QAAU,WACNC,YAAY,WACR5D,EAAKE,SAAS,CACVkD,KAAM,IAAItB,QAGf,8EAGE,IAAA3B,EAEkCC,KAAKd,MAArCuE,EAFF1D,EAEE0D,gBAAiBC,EAFnB3D,EAEmB2D,YAIxB,OAFA1D,KAAKuD,UAGDpE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,SAAIoE,EAAJ,SAA6BtE,EAAAC,EAAAC,cAAA,SAAIoE,IAC5DtE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACsE,EAAD,CAAMX,KAAMhD,KAAKP,MAAMuD,OACvB7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,YAAOqE,EAAYxC,KAAOC,KAAKC,MAAMsC,EAAYxC,KAAKG,MAAQ,MAAYlC,EAAAC,EAAAC,cAAA,mBAD9E,eA3BSsB,qBCHvBiD,EAA0B,0BAC1BC,EAA0B,0BCgDjB1D,EAlDA,CACX,CACIK,GAAI,QACJE,MAAO,WAEX,CACIF,GAAI,QACJE,MAAO,WAEX,CACIF,GAAI,QACJE,MAAO,WAEX,CACIF,GAAI,QACJE,MAAO,WACR,CACCF,GAAI,QACJE,MAAO,UAEX,CACIF,GAAI,QACJE,MAAO,YAEX,CACIF,GAAI,QACJE,MAAO,UAEX,CACIF,GAAI,QACJE,MAAO,eAEX,CACIF,GAAI,QACJE,MAAO,aAMX,CACIF,GAAI,QACJE,MAAO,eAEX,CACIF,GAAI,QACJE,MAAO,aCtCAoD,EANG,SAAC5E,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKmB,GAAG,aACJrB,EAAAC,EAAAC,cAAA,OAAKmB,GAAG,aCKVuD,8LAGkB,IAAAhE,EACyCC,KAAKd,OAC9De,EAFgBF,EACTE,gBADSF,EACOG,cADPH,EACsB0D,kDAKjC,IAAAO,EAE2FhE,KAAKd,MAA9Fe,EAFF+D,EAEE/D,eAAgBC,EAFlB8D,EAEkB9D,cAAewD,EAFjCM,EAEiCN,YAAaO,EAF9CD,EAE8CC,UAAWR,EAFzDO,EAEyDP,gBAAiBlB,EAF1EyB,EAE0EzB,cAE/E,OACIpD,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAAC6E,EAAD,CACI/D,OAAQA,EACRF,eAAgBA,EAChBC,cAAeA,IAGf+D,EACM9E,EAAAC,EAAAC,cAAC8E,EAAD,MACAhF,EAAAC,EAAAC,cAACiD,EAAA,SAAD,KACEnD,EAAAC,EAAAC,cAAC+E,EAAD,CACIV,YAAaA,EACbD,gBAAiBA,IAErBtE,EAAAC,EAAAC,cAACgF,EAAD,CACI9B,cAAeA,aA7BhB5B,aAwDhB2D,cAjBS,SAAC7E,GACrB,MAAO,CACHwE,UAAWxE,EAAMwE,UACjB/D,cAAeT,EAAMS,cACrBuD,gBAAiBhE,EAAMgE,gBACvBC,YAAajE,EAAM8E,KACnBhC,cAAe9C,EAAM8C,gBAKF,SAACiC,GACxB,MAAO,CACHvE,eAAgB,SAACwE,EAAQC,GAAT,OAAsBF,EC3DpB,SAACC,EAAOC,GAAR,MAAsB,CAC5CC,KJH4B,0BII5BC,QAAS,CACLH,SACAC,aDuD+CG,CAAkBJ,EAAQC,OAIlEJ,CAA6CP,GEnD7Ce,mLARP,OACI3F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC0F,EAAD,cAJEpE,aCQEqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFCXAC,EAAe,CACjBpB,WAAW,EACXM,KAAM,GACNhC,cAAe,GACfrC,cAAe,QACfuD,gBAAiB,WA8BN6B,EA3BK,WAAkC,IAAjC7F,EAAiC8F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQC,EAAOf,MACX,IPjBwB,0BOkBpB,OAAO7C,OAAA6D,EAAA,EAAA7D,CAAA,GACArC,EADP,CAEIwE,WAAW,EACX/D,cAAewF,EAAOd,QAAQH,OAC9BhB,gBAAiBiC,EAAOd,QAAQF,WAExC,KAAKd,EACD,OAAO9B,OAAA6D,EAAA,EAAA7D,CAAA,GACArC,EADP,CAEI8E,KAAMmB,EAAOd,QAAQL,KACrBhC,cAAemD,EAAOd,QAAQrC,cAC9B0B,WAAW,IAEnB,KAAKJ,EACD,OAAO/B,OAAA6D,EAAA,EAAA7D,CAAA,GACArC,EADP,CAEIwE,WAAW,IAEnB,QACI,OAAOxE,8CC/BJmG,EANA,CACXC,SAAU,iCACVC,QAAS,mCACTC,UAAW,UCAfC,IAAMC,SAASC,OAAS,GACxBF,IAAMC,SAASC,OAAf,MAAiCN,EAAOE,QACxCE,IAAMC,SAASC,OAAf,MAAiCN,EAAOG,UAGzB,IAAAI,EAAA,CACXC,QAASJ,IAAMK,OAAO,CAClBC,QAASV,EAAOC,uBCNdhB,cAuBe0B,GAvBzB,SAAU1B,EAAkBa,GAA5B,IAAA7E,EAAA0D,EAAAhC,EAAA,OAAAiE,EAAApH,EAAAqH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGuB,OAHvBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG6B1E,YAAKiE,EAAIC,QAAQS,IAAb,wBAAAzG,OAA0CsF,EAAOd,QAAQH,SAH1F,OAK8B,OAL9B5D,EAAA6F,EAAAI,KAGevC,EAHf1D,EAGe0D,KAHfmC,EAAAE,KAAA,EAKoC1E,YAAKiE,EAAIC,QAAQS,IAAb,yBAAAzG,OAA2CsF,EAAOd,QAAQH,SALlG,OAOQ,OAFMlC,EALdmE,EAAAI,KAAAJ,EAAAE,KAAA,GAOcG,YAAI,CACNpC,KAAMf,EACNgB,QAAS,CAACL,OAAMhC,cAAeA,EAAcgC,KAAKyC,QAT9D,QAAAN,EAAAE,KAAA,iBAeQ,OAfRF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAAAA,EAAAE,KAAA,GAecG,YAAI,CACNpC,KAAMd,IAhBlB,yBAAA6C,EAAAQ,SAAAC,EAAAnH,KAAA,UAuBe,SAAUuG,IAAV,OAAAC,EAAApH,EAAAqH,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OACX,OADWQ,EAAAR,KAAA,EACLS,YAAW,0BAA2BxC,GADjC,wBAAAuC,EAAAF,SAAAI,EAAAtH,2BCCAuH,EArBQ,WACnB,IAAMC,EAAiBC,cAEnBC,EAAc,CACdC,YAAgBH,EAAgBI,KAChC3C,OAAO4C,8BAAgC5C,OAAO4C,gCAG5CC,EAAQC,YACVzC,EACA0C,IAAOC,WAAP,EAAWP,IAOf,OAJAF,EAAeU,IAAIC,GAEnBL,EAAMM,MAAQ,kBAAMN,EAAMtD,SAAS6D,MAE5BP,EAIIP,GCrBTe,EACFnJ,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAUT,MAAOA,GACb3I,EAAAC,EAAAC,cAACmJ,EAAD,OAIRC,IAASC,OAAOJ,EAAKK,SAASC,eAAe,SNoHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.380ac233.chunk.js","sourcesContent":["import React from 'react'\n\nconst Button = (props) => (\n    <div className={'button_wrapper'}>\n        <div className=\"nav-icon\" onClick={props.onClick}>\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    </div>\n);\n\nexport default Button;","import React, {Component} from 'react'\nimport Button from \"./Button\";\n\nclass Navigation extends Component {\n\n    state = {\n        isActive: false\n    };\n\n\n    defineClass = () => this.state.isActive ? \"active\" : \"notActive\";\n\n    showNavigation = () => {\n        this.setState({\n            isActive: !this.state.isActive\n        })\n    };\n\n    render() {\n\n        const {getCityWeather, currentCityId, cities} = this.props;\n\n        return (\n            <div className={`navigation ${this.defineClass()}`}>\n                <Button onClick={this.showNavigation}/>\n                <ul>\n                    {\n                        cities.map(city => (\n                            <li\n                                className={city.id === currentCityId ? 'active' : null}\n                                key={city.id}\n                                onClick={() => getCityWeather(city.id, city.title)}\n                            >{city.title}</li>\n                        ))\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Navigation;","import React from 'react'\n\nconst DayWeatherInfo = ({day}) => (\n    <li className={\"weather_info_item\"}>\n        <div className={\"date\"}>{day.dt_txt.substring(11,16)}</div>\n        <div className={\"day_name\"}>{day.weather[0].main}</div>\n        <div className={\"temperature\"}>{Math.floor(day.main.temp)}<sup>o</sup></div>&nbsp;\n        <div className={\"weather_icon\"}>icon</div>\n    </li>\n)\n\nexport default DayWeatherInfo;","const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nconst month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport {\n    days,\n    month\n}","import React from 'react'\nimport {month, days} from '../api/time'\n\nconst WeekWeatherInfo = ({day, index}) => (\n    <li className={\"weather_info_item\"}>\n        <div className={\"date\"}>\n            {month[day.dt_txt.substring(6, 7) - 1]} {new Date().getDate() + index}\n        </div>\n        <div className={\"day_name\"}>{days[new Date().getDay() + index]}</div>\n        <div className={\"temperature\"}>{Math.floor(day.main.temp)}<sup>o</sup></div>\n        &nbsp;\n        <div className={\"weather_icon\"}>icon</div>\n    </li>\n)\n\nexport default WeekWeatherInfo;","import React, {Component, Fragment} from \"react\"\nimport DayWeatherInfo from \"./DayWeatherInfo\";\nimport WeekWeatherInfo from \"./WeekWeatherInfo\";\nimport moment from 'moment'\n\nclass WeatherInfo extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: \"day\"\n        }\n    }\n\n    viewChange = (view) => {\n        this.setState({\n            view\n        });\n    };\n\n    defineClass = view => this.state.view === view ? \"active\" : null;\n\n\n    render() {\n\n        return (\n            <div className={\"weather_side_info\"}>\n                <div className=\"tab\">\n                    <ul>\n                        <li\n                            onClick={() => this.viewChange(\"day\")}\n                            className={this.defineClass(\"day\")}\n                        >Hourly\n                        </li>\n                        <li\n                            onClick={() => this.viewChange(\"week\")}\n                            className={this.defineClass(\"week\")}\n                        >5 days\n                        </li>\n                    </ul>\n                </div>\n                <ul className={\"day_list\"}>\n                    {\n                        this.state.view === \"day\"\n                            ?\n                            <Fragment>\n                                {\n                                    this.props.otherDaysData.map((day, index) => <DayWeatherInfo day={day}\n                                                                                                 index={index}/>)\n                                }\n                            </Fragment>\n                            :\n                            <Fragment>\n                                {\n                                    this.props.otherDaysData.map((item, index) => {\n                                        if (moment.unix(item.dt).format('HH:mm') === '11:00' && moment().format('DD/MM/YYYY') !== moment.unix(item.dt).format('DD/MM/YYYY')) {\n                                            return <WeekWeatherInfo day={item} index={index}/>\n                                            console.log(item)\n                                        }\n                                    })\n                                }\n                            </Fragment>\n\n                    }\n                </ul>\n            </div>)\n\n    }\n}\n\nexport default WeatherInfo;","import React from 'react'\nimport {days, month} from \"../api/time\";\n\nconst Time = ({date}) => (\n    <div className=\"date\">\n        <div className=\"time\">\n            <span>{date.getHours()}</span>:\n            <span>{date.getMinutes()}</span>:\n            <span>\n                {\n                    date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()\n                }\n            </span>\n        </div>\n        <div className={\"date_info\"}>\n            <span>{month[date.getDay()]}, </span>\n            <span>{days[date.getMonth()]} </span>\n            <span>{date.getDate()}, </span>\n            <span>{date.getFullYear()}</span>\n        </div>\n    </div>\n);\n\nexport default Time;","import React, {Component} from \"react\"\nimport Time from '../components/Time'\n\n\nclass WeatherCurrent extends Component {\n\n    state = {\n        date: new Date()\n    };\n\n\n    getTime = () => {\n        setInterval(() => {\n            this.setState({\n                date: new Date()\n\n            })\n        }, 1000)\n    };\n\n    render() {\n\n        const {currentCityName, weatherData} = this.props;\n\n        this.getTime();\n\n        return (\n            <div className={\"weather_current\"}>\n                <div className=\"city_name\"><p>{currentCityName} city</p><p>{currentCityName}</p></div>\n                <div className=\"bottom_info\">\n                    <Time date={this.state.date}/>\n                    <div className=\"temperature\">\n                        <span>{weatherData.main ? Math.floor(weatherData.main.temp) : null}</span><sup>°</sup> C\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WeatherCurrent;\n","const CURRENT_WEATHER_REQUEST = \"CURRENT_WEATHER_REQUEST\";\nconst CURRENT_WEATHER_SUCCESS = \"CURRENT_WEATHER_SUCCESS\";\nconst CURRENT_WEATHER_FAILURE = \"CURRENT_WEATHER_FAILURE\";\n\n\nexport {CURRENT_WEATHER_REQUEST, CURRENT_WEATHER_FAILURE, CURRENT_WEATHER_SUCCESS}","const cities = [\n    {\n        id: 1514588,\n        title: 'Andijan'\n    },\n    {\n        id: 1217662,\n        title: 'Bukhara'\n    },\n    {\n        id: 1484845,\n        title: 'Fergana'\n    },\n    {\n        id: 1513886,\n        title: 'Jizzakh'\n    }, {\n        id: 1484843,\n        title: 'Xorazm'\n    },\n    {\n        id: 1513157,\n        title: 'Namangan'\n    },\n    {\n        id: 1513131,\n        title: 'Navoiy'\n    },\n    {\n        id: 1114928,\n        title: 'Qashqadaryo'\n    },\n    {\n        id: 1216265,\n        title: 'Samarqand'\n    },\n    // {\n    //     id: 1484840,\n    //     title: 'Sirdaryo'\n    // },\n    {\n        id: 1114926,\n        title: 'Surxondaryo'\n    },\n    {\n        id: 1512569,\n        title: 'Tashkent'\n    }\n];\n\nexport default cities;","import React from 'react'\n\nconst Preloader = (props) => (\n    <div id=\"preloader\">\n        <div id=\"loader\"></div>\n    </div>\n);\n\nexport default Preloader;","import React, {Component, Fragment} from 'react'\nimport Navigation from \"../components/Navigation\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport WeatherCurrent from \"../components/WeatherCurrent\";\nimport {connect} from \"react-redux\";\nimport {getCurrentWeather} from '../actions/actions'\nimport cities from '../api/cities'\nimport Preloader from \"../components/Preloader\";\n\nclass WeatherContainer extends Component {\n\n\n    componentDidMount() {\n        const {getCityWeather, currentCityId, currentCityName} = this.props;\n        getCityWeather(currentCityId, currentCityName);\n    }\n\n\n    render() {\n\n        const {getCityWeather, currentCityId, weatherData, isLoading, currentCityName, otherDaysData} = this.props;\n\n        return (\n            <div className={\"container\"}>\n                <Navigation\n                    cities={cities}\n                    getCityWeather={getCityWeather}\n                    currentCityId={currentCityId}\n                />\n                {\n                    isLoading\n                        ? <Preloader/>\n                        : <Fragment>\n                            <WeatherCurrent\n                                weatherData={weatherData}\n                                currentCityName={currentCityName}\n                            />\n                            <WeatherInfo\n                                otherDaysData={otherDaysData}\n                            />\n                        </Fragment>\n                }\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoading: state.isLoading,\n        currentCityId: state.currentCityId,\n        currentCityName: state.currentCityName,\n        weatherData: state.data,\n        otherDaysData: state.otherDaysData\n    }\n};\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getCityWeather: (cityId, cityName) => dispatch(getCurrentWeather(cityId, cityName)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherContainer);\n\n","import {CURRENT_WEATHER_REQUEST} from './types';\n\nconst getCurrentWeather = (cityId,cityName) => ({\n    type: CURRENT_WEATHER_REQUEST,\n    payload: {\n        cityId,\n        cityName\n    }\n});\n\n\n\nexport {getCurrentWeather}\n","import React, {Component} from 'react';\nimport '../src/assets/styles/main.css';\nimport WeatherContainer from \"./containers/WeatherContainer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <WeatherContainer/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CURRENT_WEATHER_SUCCESS,\n    CURRENT_WEATHER_REQUEST,\n    CURRENT_WEATHER_FAILURE,\n    WEEK_WEATHER_REQUEST\n} from \"../actions/types\";\n\nconst initialState = {\n    isLoading: true,\n    data: {},\n    otherDaysData: {},\n    currentCityId: 1514588,\n    currentCityName: 'Andijan'\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CURRENT_WEATHER_REQUEST:\n            return {\n                ...state,\n                isLoading: true,\n                currentCityId: action.payload.cityId,\n                currentCityName: action.payload.cityName\n            };\n        case CURRENT_WEATHER_SUCCESS:\n            return {\n                ...state,\n                data: action.payload.data,\n                otherDaysData: action.payload.otherDaysData,\n                isLoading: false\n            };\n        case CURRENT_WEATHER_FAILURE:\n            return {\n                ...state,\n                isLoading: true\n            };\n        default:\n            return state;\n    }\n};\n\n\nexport default rootReducer;","const config = {\n    API_ROOT: 'https://api.openweathermap.org',\n    API_KEY: 'd519a1671e38cb1022de1f46a669cc0c',\n    API_UNITS: 'metric'\n};\n\nexport default config;","import axios from 'axios';\nimport config from './config';\n\naxios.defaults.params = {};\naxios.defaults.params['APPID'] = config.API_KEY;\naxios.defaults.params['units'] = config.API_UNITS;\n\n\nexport default {\n    request: axios.create({\n        baseURL: config.API_ROOT\n    }),\n};","import {call, put, takeLatest} from 'redux-saga/effects'\nimport {CURRENT_WEATHER_SUCCESS, CURRENT_WEATHER_FAILURE} from '../actions/types'\nimport api from '../api/index'\n\nfunction* getCurrentWeather(action) {\n    try {\n\n        const {data} = yield call(api.request.get, `/data/2.5/weather?id=${action.payload.cityId}`);\n\n        const otherDaysData = yield call(api.request.get, `/data/2.5/forecast?id=${action.payload.cityId}`);\n\n        yield put({\n            type: CURRENT_WEATHER_SUCCESS,\n            payload: {data, otherDaysData: otherDaysData.data.list}\n        })\n\n\n    } catch (e) {\n\n        yield put({\n            type: CURRENT_WEATHER_FAILURE\n        })\n\n    }\n}\n\n\nexport default function* watchFetchData() {\n    yield takeLatest('CURRENT_WEATHER_REQUEST', getCurrentWeather);\n}\n","import {createStore, compose, applyMiddleware} from 'redux'\nimport createSagaMiddleware, {END} from 'redux-saga'\nimport rootReducer from '../reducers/rootReducer'\nimport rootSaga from '../sagas/index'\nimport logger from 'redux-logger'\n\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n\n    let middlewares = [\n        applyMiddleware(sagaMiddleware, logger),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    ];\n\n    const store = createStore(\n        rootReducer,\n        compose(...middlewares)\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    store.close = () => store.dispatch(END);\n\n    return store\n\n};\n\nexport default configureStore();\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nconst app = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}